name: Build
on:
    push:
    pull_request:
    release:
        types: [published]
    schedule:
        - cron: '30 3 * * 0'

env:
    TAG: ${{ github.ref }}

jobs:
  # Common Build matrix for builds on Ubuntu VM
  ubuntu_build:
    name: ${{ matrix.build_name }}
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix:
        # Add more compilers here if you need them
        build_name: ['Ubuntu GCC 7', 'Ubuntu GCC 8', 'Ubuntu Clang 6']
        include:
          - build_name: 'Ubuntu GCC 7'
            package_name: 'gcc-7 g++-7'
            cc: gcc-7
            cxx: g++-7
            label: linux-gcc-7
            deployable: false
          - build_name: 'Ubuntu GCC 8'
            package_name: 'gcc-8 g++-8'
            cc: gcc-8
            cxx: g++-8
            label: linux
            deployable: true
          - build_name: 'Ubuntu Clang 6'
            cc: clang-6.0
            cxx: clang++-6.0
            label: linux-clang-6
            deployable: false
    env:
        CCACHE_DIR: $GITHUB_WORKSPACE/.ccache
        LABEL: ${{ matrix.label }}
    steps:
      - uses: actions/checkout@v1

      # Fetch Dependencies
      - name: Dependencies
        if: matrix.build_name != 'aarch64'
        run: |
            sudo apt update
            sudo apt install -y libboost-all-dev libssl-dev ${{ matrix.package_name }}

      - name: Setup ccache
        run: |
            sudo apt install ccache

      - name: Retrieve ccache
        uses: actions/cache@v1
        with:
            path: .ccache
            key: ccache-${{ matrix.label }}

      # Configure the project with cmake
      - name: Configure
        if: matrix.build_name != 'aarch64'
        env:
            CC: ${{ matrix.cc }}
            CXX: ${{ matrix.cxx }}
        run: |
            mkdir build && cd build
            cmake -DBUILD_ALL:BOOL=TRUE ..

      # Build for linux
      - name: Build
        if: matrix.build_name != 'aarch64'
        run: |
            cd build
            cmake --build . --config Release

      # Prepare for deploy
      - name: Prepare for Deploy
        id: before_deploy
        env:
            COMMIT_SHA: ${{ github.sha }}
        run: |
            if [[ "${TAG:5:4}" == "tags" ]]; then export TAG=${TAG:10}; else export TAG=${COMMIT_SHA::8}; fi
            cd build/src
            TARGETS="qwertycoind simplewallet walletd optimizer miner"
            if [[ "${LABEL}" != "aarch64" ]]; then strip ${TARGETS}; fi
            rm -rf qwertycoin-${TAG}
            mkdir qwertycoin-${TAG}
            cp ${TARGETS} qwertycoin-${TAG}/
            cp ../../LICENSE.txt qwertycoin-${TAG}/
            tar cvfz qwertycoin-${LABEL}-${TAG}.tar.gz qwertycoin-${TAG}/
            echo ::set-output name=binary_path::qwertycoin-${TAG}
            echo ::set-output name=artifact_name::qwertycoin-${LABEL}-${TAG}
            echo ::set-output name=file_name::qwertycoin-${LABEL}-${TAG}.tar.gz

      # Upload to GH Release
      - name: Upload to GH Release
        if: github.event_name == 'release' && matrix.deployable
        uses: actions/upload-release-asset@v1.0.1
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
            upload_url: ${{ github.event.release.upload_url }}
            asset_path: ./build/src/${{ steps.before_deploy.outputs.file_name }}
            asset_name: ${{ steps.before_deploy.outputs.file_name }}
            asset_content_type: application/gzip

      # Upload to GH Actions Artifacts
      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v1.0.0
        with:
            name: ${{ steps.before_deploy.outputs.artifact_name }}
            path: ./build/src/${{ steps.before_deploy.outputs.binary_path }}

  # Mac builds on Catalina VM
  macos_build:
    name: macOS
    runs-on: macOS-latest
    env:
        CC: /usr/local/opt/llvm@8/bin/clang
        CXX: /usr/local/opt/llvm@8/bin/clang++
        LABEL: osx
        CCACHE_DIR: $GITHUB_WORKSPACE/.ccache
    steps:
      - uses: actions/checkout@v1

      # Fetch Dependencies
      - name: Dependencies
        run: |
            brew install --force boost llvm@8 ccache
            brew link --force llvm@8
            ln -s /usr/local/opt/llvm@8 /usr/local/opt/llvm

      - name: Retrieve ccache
        uses: actions/cache@v1
        with:
            path: .ccache
            key: ccache-osx

      # Configure project with cmake
      - name: Configure
        run: |
            mkdir build && cd build
            cmake -DBUILD_ALL:BOOL=TRUE ..

      # Build for macOS
      - name: Build
        run: |
            cd build
            cmake --build . --config Release

      # Prepare for deploy
      - name: Prepare for Deploy
        id: before_deploy
        env:
            COMMIT_SHA: ${{ github.sha }}
        run: |
            if [[ "${TAG:5:4}" == "tags" ]]; then export TAG=${TAG:10}; else export TAG=${COMMIT_SHA::8}; fi
            cd build/src
            TARGETS="qwertycoind simplewallet walletd optimizer miner"
            strip ${TARGETS}
            rm -rf qwertycoin-${TAG}
            mkdir qwertycoin-${TAG}
            cp ${TARGETS} qwertycoin-${TAG}/
            cp ../../LICENSE.txt qwertycoin-${TAG}/
            tar cvfz qwertycoin-${LABEL}-${TAG}.tar.gz qwertycoin-${TAG}/
            echo ::set-output name=binary_path::qwertycoin-${TAG}
            echo ::set-output name=artifact_name::qwertycoin-${LABEL}-${TAG}
            echo ::set-output name=file_name::qwertycoin-${LABEL}-${TAG}.tar.gz


      # Upload to GH Release
      - name: Upload to GH Release
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1.0.1
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
            upload_url: ${{ github.event.release.upload_url }}
            asset_path: ./build/src/${{ steps.before_deploy.outputs.file_name }}
            asset_name: ${{ steps.before_deploy.outputs.file_name }}
            asset_content_type: application/gzip

      # Upload to GH Actions Artifacts
      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v1.0.0
        with:
            name: ${{ steps.before_deploy.outputs.artifact_name }}
            path: ./build/src/${{ steps.before_deploy.outputs.binary_path }}

  # Windows Builds on Windows Server 2019
  windows_build:
    name: Windows
    runs-on: windows-2019
    env:
      MSBUILD_PATH: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/MSBuild/Current/Bin"
      LABEL: windows
    steps:
      - uses: actions/checkout@v1

      - name: Setup clcache
        run: pip install clcache

      - name: Retrieve clcache
        uses: actions/cache@v1
        with:
            path: clcache
            key: clcache-windows

      # Configure project with cmake
      - name: Configure
        run: |
            mkdir build
            cd build
            cmake -G "Visual Studio 16 2019" -A x64 -DBUILD_ALL:BOOL=TRUE -DARCH=default ..

      # Build for Windows
      - name: Build
        run: |
            $env:CLCACHE_DIR = "$env:GITHUB_WORKSPACE\clcache"
            $env:PATH = "$env:PATH;$env:MSBUILD_PATH"
            cd build
            cmake --build . --config Release

      # Prepare for deploy
      - name: Prepare for Deploy
        shell: bash
        id: before_deploy
        env:
            COMMIT_SHA: ${{ github.sha }}
        run: |
            if [[ "${TAG:5:4}" == "tags" ]]; then export TAG=${TAG:10}; else export TAG=${COMMIT_SHA::8}; fi
            cd build/src/Release
            rm -rf qwertycoin-${TAG}
            mkdir qwertycoin-${TAG}
            cp *.exe qwertycoin-${TAG}/
            cp ../../../LICENSE.txt qwertycoin-${TAG}/
            7z a qwertycoin-${LABEL}-${TAG}.zip qwertycoin-${TAG}/
            echo ::set-output name=binary_path::qwertycoin-${TAG}
            echo ::set-output name=artifact_name::qwertycoin-${LABEL}-${TAG}
            echo ::set-output name=file_name::qwertycoin-${LABEL}-${TAG}.zip


      # Upload to GH Release
      - name: Upload to GH Release
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1.0.1
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
            upload_url: ${{ github.event.release.upload_url }}
            asset_path: ./build/src/Release/${{ steps.before_deploy.outputs.file_name }}
            asset_name: ${{ steps.before_deploy.outputs.file_name }}
            asset_content_type: application/zip

      # Upload to GH Actions Artifacts
      - name: Upload To GH Artifacts
        uses: actions/upload-artifact@v1.0.0
        with:
            name: ${{ steps.before_deploy.outputs.artifact_name }}
            path: ./build/src/Release/${{ steps.before_deploy.outputs.binary_path }}
