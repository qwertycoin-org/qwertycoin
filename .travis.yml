language: cpp

matrix:
    include:
        - os: linux # android
          dist: xenial
          sudo: required
          env:
              - CMAKE_GENERATOR_NAME="Unix Makefiles"
              - CMAKE_TOOLCHAIN_FILE_NAME=android-ndk-r18b-api-21-x86-clang-libcxx.cmake
              - CMAKE_ARGS="-DANDROID=TRUE -DBUILD_ALL:BOOL=TRUE -DBUILD_WITH_TESTS:BOOL=FALSE"
        - os: linux
          dist: xenial
          sudo: required
          env:
              - CMAKE_GENERATOR_NAME="Unix Makefiles"
              - CMAKE_TOOLCHAIN_FILE_NAME=gcc-cxx14-c11.cmake
              - CMAKE_ARGS="-DBUILD_ALL:BOOL=TRUE"
        - os: osx
          osx_image: xcode10.1
          env:
              - CMAKE_GENERATOR_NAME="Unix Makefiles"
              - CMAKE_TOOLCHAIN_FILE_NAME=clang-cxx14.cmake
              - CMAKE_ARGS="-DBUILD_ALL:BOOL=TRUE"

addons:
    apt: # Linux
        packages:
            - build-essential
            - cmake
            - git
            - unzip
            - wget
            - lcov
        sources:
            - ubuntu-toolchain-r-test
    homebrew: # macOS
        packages:
            - cmake
            - git

cache:
    directories:
        - $HOME/.hunter

before_install:
    - |
        if [ "$CMAKE_TOOLCHAIN_FILE_NAME" = "android-ndk-r18b-api-21-x86-clang-libcxx.cmake" ]; then
            echo "Installing Android NDK..."
            mkdir -p "$HOME/.android"
            wget -O "$HOME/.android/android-ndk-r18b-linux-x86_64.zip" "https://dl.google.com/android/repository/android-ndk-r18b-linux-x86_64.zip"
            unzip -qq "$HOME/.android/android-ndk-r18b-linux-x86_64.zip" -d "$HOME/.android"
            export ANDROID_NDK_r18b="$HOME/.android/android-ndk-r18b"
            ls -la "$ANDROID_NDK_r18b"
        fi

script:
    - mkdir ./build
    - cd ./build
    - cmake -G "$CMAKE_GENERATOR_NAME" -DCODE_COVERAGE=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=cmake/polly/$CMAKE_TOOLCHAIN_FILE_NAME $CMAKE_ARGS ..
    - cmake --build . --config Release
    - cmake --build . --config Release --target package

after_success:
    # Create lcov report
    - lcov --capture --directory . --output-file coverage.info
    - lcov --remove coverage.info '/usr/*' --output-file coverage.info # filter system-files
    - lcov --list coverage.info # debug info
    # Uploading report to CodeCov
    - bash <(curl -s https://codecov.io/bash) -f coverage.info || echo "Codecov did not collect coverage reports"